#PHP tahák

#1_Basic
 
//Single line comment
#single line comment
/*
multi line comment
	*/
echo ‘Hello World’;
Format
myFunction();	|camelCase → první slovo malým každé další Velkým
my_function();	|Lower Case → podtržítko mezi slovy
MyFunction();	|Pascal Case → každé slovo velké písmeno(pro třídy)

----------------------------------------------------------------------------------------------------------------------------------------

#_2Variables (proměnné)

•	$output = ‘Hello World’;
    |začíná znakem: $
    |musí začít písmenem nebo _podtržítkem
    |pouze písmena, čísla a podtržítka
    |na velikosti (písmen) záleží
    
	-->Datové typy<--
	$output = ‘Hello World;        |string
	$num1 = 4;	                   |integers
	$float1 = 4.4;	               |floats
	$bool1 = true;                 |booleans
•	$sum = $num1 + $num2;	        |sečte proměnné

•	$string1 = ‘Hello’;
    $string2 = ‘World!’;
    $greeting = $string1 .’ ‘. $string2;	|spojí stringy
•	$greeting = “$string1 $gstring2”;	    | -||-	

•	$justString = ‘they/’re Here’;	|znaménko za '/' --> ignor

----------------------------------------------------------------------------------------------------------------------------------------


#3_Constants (konstanty) – proměnné které se nemění :)

•	define(‘GREETING’, ‘Hello Everyone’);	|definuje konstantu
•	define(‘GREETING’, ‘Hello Everyone’ true);	|definuje konstantu, na velikosti (písmen) nezáleží

----------------------------------------------------------------------------------------------------------------------------------------


#4_Arrays (Pole)

-->Indexed arrays<--
•	$people = array (‘Kevin’, ‘Jeremy’, ‘Sara’);    |indexed array
    echo $people[0];					            |vypíše první položku
    
•	$ids = array(23, 55, 12);
•	$cars = [‘Honda’, ‘Toyota’, ‘Ford’];	|zkrácený zápis
    $cars[3] = ‘Chevy’;					    |třetí položku přepíše
    $cars[] = ‘BMW’;					    |na konec pole přidá zápis
    
•	echo count($cars);		|spočítá položky a vypíše
•	print_r($cars);		    |vypíše pole i s indexy
•	var_dump($cars);		|vypíše všechny info o poli a o položkách (indexy, dat.typy)

-->Associative arrays<--
●	$people = array(‘Brad’ => 35, ‘Jose’ => 32, ‘William => 37);        |pole people (‘klíč‘ => hodnota)
    echo $people[‘Brad’];		                                        |vrátí hodnotu 35

●	$ids = [22 => ‘Claudia’, 33 => ‘Maria’, 44 => ‘Clara’];             |zkrácený zápis
    echo $ids[22];				                                        |vrátí hodnotu ‘Claudia’

-->Multi-Dimensional<--

●	$cars = array(
    array(‘Honda’, 20, 10),
    array(‘Toyota’, 30, 20),
    array(‘Ford’, 23, 12)
	);
	echo $cars[1][2];			|vypíše: 20
    
----------------------------------------------------------------------------------------------------------------------------------------
    
#5_LOOPS (cykly)
    For
    While
    Do..While
    Foreach

--> For <--
•	for($  =  0; $ < 10; $i++){			
	echo ‘Number’ .$i;
	}
    
--> While<--
    •	$i = 0;
        while($i<10){
        echo $i;
        echo ‘<br>’;    
        $i++;
        }        
        
--> Do ..While <--			|provede se alespoň jednou
    •	$i = 0;
        do{
        echo $i;
        echo ‘<br>’;    
        $i++;
        } while($i<10);
    
--> Foreach <--			|provede se alespoň jednou
    •	$people = array(‘Brad, ‘Jose’, ‘William’);
        foreach($people as $person){
        echo $person;
        echo ‘<br>’;
        }                             
    •	$people = array(‘Brad’ => ‘brad@gmail.com’, ‘Jose’ => ‘jose@gmail.com’, ‘William’ => will@gmail.com’);
        foreach($people as $person => $email){
        echo $person. ’:’ .email;
        echo ‘<br>’;       
        }
------------------------------------------------------------------------------------------------------------------------------------------------------
#6_Functions 	
|znovupoužitelný blok kódu

•	function simpleFunction(){	|vtvoření funkce
	echo ‘Hello Word’;
	}
	simpleFunction();			|zavolání funkce
•	function sayHello($name){	|funkce s proměnnou
    echo “Hello $name<br>”;
    }
•	function addNumbers($num1, $num2){
    return $num1 + $num2;
	}
	echo addNumbers(2,3);
•	my num = 10;
    function addFive($num){
    $num += 5;			|k číslu přičte 5
        }
        function addTen(&$num){		|číslo projde objema fcema
            $num += 10;
        }
        addFive($myNum);
        echo “Value: $myNum<br>”;
        addTen($myNum);
        echo “Value: $myNum;Conditionals & Comparsion (podmínky)

 
•	==	|rovná se 	
•	===	|identický (včetně typu)
•	<	|větší než...
•	>	|...
•	<=	|...
•	>=	|...
•	!=	|nerovná se
•	!=	|není identický
•	&&	|AND
•	| |	|OR
•	.	|XOR
 
•	$num = 5;				|klasické if, else if, else
    if ($num == 5){
    echo ‘5 passed’;
    } elseif ($num == 6){
    echo ‘6 passed’;
    }else{
    echo ‘did not pass’;
    }
•	if($num > 4 && $num<10){	|zkrácená verze, lze použít i AND/OR/XOR
    echo “$num passed”;}
 
•	$favColor = ‘red’;
    switch($favColor){
    case ‘red’:
    echo ‘Your favourite color is red’;
    break;
    case ‘blue’:
    echo ‘Your favourite color is blue’;
    break;...
    …case ‘green’:
    echo ‘Your favourite color is green;
    break;
    case ‘yellow’:
    echo ‘Your favourite color is yellow’;
    break;
    default:echo ‘Your favourite color is something else’;
    }

----------------------------------------------------------------------------------------------------------------------------------------

#7_Dates&Tiestamps (datum a čas)

 
•	echo date(‘d’);	|Den
•	echo date(‘m’);	|Měsíc
•	echo date(‘Y’);	|Rok
•	echo date(‘l’);	|Den v týdnu
•	echo date(‘m/d/Y’)	|kombinace

 
•	echo date(‘h’);	|hodina
•	echo date(‘i’);	|minuta	
•	echo date(‘s’);	|sekunda
•	echo date(‘a’);	|AM or PM
•	echo date(‘h:i:sa’);	|kombinace
•	date_default_timezone_set(‘America/New_York’);

 
•	
•	$timestamp = mktime(10, 14, 9, 10, 1981);		|vlastní datetime
    echo date(‘m/d/Y h:i:sa’, $timestamp);			|vypsat vlastní datetime
•	$timestamp2= strtotime(‘7:00pm March 22 2016’);	|string to date
•	$timestamp3 = strtotime(‘tomorrow’);			|uloží do do $ zítřejší datum
•	$timestamp = (‘next Sunday’);				
•	$timestamp = (‘+2 month’);					    |the same with days/week

#8_Include & Require
|to co je stejné na všech stránkách lze načíst ze samostatného souboru .php (např header a footer)

•	<?php include 'inc/header.php'; ?>		
|pokud chci aby v případě nenačtení souboru se stránka dále vypsala

•	<?php require 'inc/header.php'; ?>		
|pokud nechci aby se při nenačtení daného souboru stránka dále vypisovala

----------------------------------------------------------------------------------------------------------------------------------------
 
#8_$_SERVER Superglobal
    |zobrazí info o serveru nebo klientovi
    |soubor http://localhost/phpsandbox/website2/index.php
    |složka: website2
    
----------------------------------------------------------------------------------------------------------------------------------------

    
#9_Get & Post

----------------------------------------------------------------------------------------------------------------------------------------


#10_String functions

•	$output = substr(‘Helo’, 1, 3);		    |vypíše od prvního do třetího znaku
•	$output = substr(‘Helo’, -2);			|vypíše od druhého znaku od zadu
•	$output = strlen(‘Hello World’);		|vrátí počet znaků včetně mezer
•	$output = strpos(‘Hello World’, o);		|vrátí pozici prvního ‘o’
•	$output = strrpos(‘Hello World’, o);	|vrátí pozici posledního ‘o’
•	$text = ‘Hello World                 ’;		
    var_dump($text);				|spočítá všechny znaky včetně mezer
    $trimmed = trim($text);			|odstraní mezery
    var_dump($trimmed);
    
•	$output = strtoupper(‘Hello World’)		|převede na velká písmena
•	strtolower();					        |převede na malá písmena
•	ucwords();					            |každé slovo začíná velkým
•	$text=’Hello World’;
    $output = str_replace(‘World’, ‘Everyone’, $text);
    |vymění část stringu (‘co’, ‘za co’, kde)
•	is_string();					|vrátí hodotu 1 pokud je prom string
•	gzcompress();					|kompresuje text
•	gzuncopress();				    |’rozkompresuje’ text

----------------------------------------------------------------------------------------------------------------------------------------

#11_Ternary & Shorthand Syntax

--> Zkrácení ifu<--
•	?	|if true
•	:	|if false
•	echo($loggedIn) ? 'You are logged in' : 'You are NOT logged in';    
    |zkrácený zápis ifu |vypíše podle toho jestli v $ je hodnota 1 nebo 0
    
•	$isRegistred = ($loggedIn == true) ? true : false;
    |nastaví hodnotu $isRegistred na true nebo false podle hodnoty v $loggedIn
    
•	echo 'Your score is: '. ($score > 10 ? ($age > 10 ? 'Average' : 'Exeptional')  : ($age  > 10 ? 'Horrible' : 'Average'));
    |doplní větu podle hodnoty skore a age
    
•	<div>
    	<?php if($loggedIn) { ?>
   	 <h1>Welcome USer</h1>
   	 <?php } else{ ?>
   	 <h1>Welcome guest</h1>
    	<?php } ?>
	</div>
	|nehezký zápis
    
•	<div>
   	 <?php if($loggedIn): ?>
      	  <h1>Welcome User</h1>
   	 <?php else: ?>
      	  <h1>Welcome Guest</h1>
   	 <?php endif; ?>
	</div>
|Hezčí zápis ifu (místo ‘{‘ ‘:’)

--> Zkrácení loopu <--
•	<div>
   	 <?php foreach($arr as $val): ?>
       	 <strong><?php echo $val; ?></strong>
   	 <?php endforeach; ?>
	</div>


----------------------------------------------------------------------------------------------------------------------------------------

#12_Filters and validation

-->Email validation<--
if(filter_has_var(INPUT_POST, 'data')){
        $email = $_POST['data'];

        // Remove illegal chars
        $email = filter_var($email, FILTER_SANITIZE_EMAIL);
        echo $email.'<br>';

        if(filter_var($email, FILTER_VALIDATE_EMAIL)){
            echo 'Email is valid';
        } else {
            echo 'Email is NOT valid';
        }
    }

•	#FILTER_VALIDATE_BOOLEAN
•	#FILTER_VALIDATE_EMAIL      
•	#FILTER_VALIDATE_FLOAT      
•	#FILTER_VALIDATE_INT            
•	#FILTER_VALIDATE_IP         
•	#FILTER_VALIDATE_REGEXP     
•	#FILTER_VALIDATE_URL

•	#FILTER_SANITIZE_EMAIL  
•	#FILTER_SANITIZE_ENCODED    
•	#FILTER_SANITIZE_NUMBER_FLOAT   
•	#FILTER_SANITIZE_NUMBER_INT 
•	#FILTER_SANITIZE_SPECIAL_CHARS   
•	#FILTER_SANITIZE_STRING     
•	#FILTER_SANITIZE_URL

----------------------------------------------------------------------------------------------------------------------------------------

#13_Sessions
|umožňuje ukládat proměnné k použití na dalších stránkách

Page1
if(isset($_POST['submit'])){						
    session_start();			
    $_SESSION['name'] = htmlentities($_POST['name']);
    $_SESSION['email'] = htmlentities($_POST['email']);
    header('Location: page2.php');
    }
    |vyvoří session, uloží data z formuláře
    
Page2
session_start();
$name = $_SESSION['name'];
$email = $_SESSION['email']
|vytvoří proměnné do kterých uloží data ze session pro použití na stránce

Page3
session_start();
$name = isset($_SESSION['name']) ? $_SESSION['name'] : 'Guest';
$email = $_SESSION['email']
|vytvoří proměnné, ukládá jméno pouze pokud je zadané


unset($_SESSION['name']);	|odstraní data z proměnné ‘name‘






